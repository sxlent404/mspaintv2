--// Linoria \\--
local Toggles = shared.Toggles
local Options = shared.Options

--// Variables \\--
local Script = shared.Script
local Tabs = Script.Tabs

--// Exploits \\--
local TrollingGroupBox = Tabs.Exploits:AddLeftGroupbox("Trolling") do
    TrollingGroupBox:AddToggle("ThrowPowerBoost",{
        Text = "Throw Power Boost",
        Default = false,
        Visible = wax.shared.ExecutorSupport["hookmetamethod"] and wax.shared.ExecutorSupport["getnamecallmethod"],
    })

    TrollingGroupBox:AddSlider("ThrowPower", {
        Text = "Throw Power",
        Default = 10,
        Min = 1,
        Max = 100,
        Rounding = 1,
        Compact = true,
        Visible = wax.shared.ExecutorSupport["hookmetamethod"] and wax.shared.ExecutorSupport["getnamecallmethod"],
    })

    TrollingGroupBox:AddToggle("DeleteObject", {
        Text = "FE Delete Object",
        Default = false,
        Visible = wax.shared.ExecutorSupport["hookmetamethod"] and wax.shared.ExecutorSupport["getnamecallmethod"],
    })

    TrollingGroupBox:AddToggle("Twerk",{
        Text = "Twerk",
        Default = false,
    })

    TrollingGroupBox:AddDivider()

    TrollingGroupBox:AddToggle("DeleteAura", {
        Text = "FE Delete Aura",
        Default = false,
        Risky = true,
        Tooltip = "Delete objects within a certain range of your character, this can kick you from the game and i'm too lazy to fix it."
    })

    TrollingGroupBox:AddSlider("DeleteAuraRange", {
        Text = "Delete Aura Range",
        Default = 15,
        Min = 1,
        Max = 30,
        Rounding = 1,
        Compact = true
    })
end

local BypassGroupBox = Tabs.Exploits:AddRightGroupbox("Bypass") do
    BypassGroupBox:AddToggle("Godmode", {
        Text = "Godmode",
        Default = false
    })

    BypassGroupBox:AddToggle("InfiniteHunger", {
        Text = "Disable Hunger",
        Default = false,
        Tooltip = "You will never get hungry, incompatible with Godmode."
    })

    BypassGroupBox:AddToggle("InfiniteEnergy", {
        Text = "Infinite Energy",
        Default = false,
        Tooltip = "You will never get tired, incompatible with Godmode."
    })

    BypassGroupBox:AddToggle("InfiniteInventory", {
        Text = "Infinite Inventory",
        Default = false,
        Visible = wax.shared.ExecutorSupport["require"] and wax.shared.ExecutorSupport["hookmetamethod"] and wax.shared.ExecutorSupport["getnamecallmethod"],
    })
end

Toggles.Godmode:OnChanged(function(value)
    if value then
        Script.DidGodmode = true

        repeat task.wait() until #Script.Map.Floor:GetChildren() > 0

        Script.Event:FireServer("FallDamage", {
            Sliding = false,
            OriginalDamage = (0/0),
            Sound = "LR^SS",
            Softened = true,
            Broken = false,
            Model = Script.Map.Floor:FindFirstChildOfClass("Model"),
            Range = 19,
            Damage = (0/0)
        })

    else
        if not Script.DidGodmode then return end
        Script.DidGodmode = false

        Script.Functions.Respawn()
    end
end)

Toggles.InfiniteHunger:OnChanged(function(value)
    if value and not Toggles.Godmode.Value then
        Script.Event:FireServer("DecreaseStat", {
            Stats = {
                Hunger = -100
            }
        })
    end
end)

Toggles.InfiniteEnergy:OnChanged(function(value)
    if value and not Toggles.Godmode.Value then
        Script.Event:FireServer("DecreaseStat", {
            Stats = {
                Energy = -100
            }
        })
    end
end)

local DeleteAuraParams = OverlapParams.new()
DeleteAuraParams.FilterType = Enum.RaycastFilterType.Exclude
DeleteAuraParams.FilterDescendantsInstances = {shared.Character, shared.Camera}

Toggles.DeleteAura:OnChanged(function(value)
    if value then
        repeat task.wait(0.15)
            local CloseParts = workspace:GetPartBoundsInBox(shared.RootPart.CFrame, Vector3.new(Options.DeleteAuraRange.Value, Options.DeleteAuraRange.Value, Options.DeleteAuraRange.Value), DeleteAuraParams)
            
            for _, part in pairs(CloseParts) do 
                local targetFurniture = part:FindFirstAncestorOfClass("Model") or part.Parent
                if shared.Players:GetPlayerFromCharacter(targetFurniture) then continue end

                if targetFurniture and targetFurniture:IsA("Model") and targetFurniture.PrimaryPart then
                    local isClose = shared.Character and Script.Functions.DistanceFromCharacter(part) <= 9
                    local isAbleToPickup = not targetFurniture:GetAttribute("Busy")
                    
                    if not isClose or not isAbleToPickup then continue end

                    Script.Action:InvokeServer("Pickup", {["Model"] = targetFurniture})
                    
                    Script.Action:InvokeServer("Drop", {
                        EndCFrame = CFrame.new(shared.RootPart.Position + Vector3.new(
                            math.random(1, 5),
                            math.random(5, 8),
                            math.random(1, 5)
                        )),

                        CameraCFrame = Vector3.new(0.9865860342979431, 0.16270768642425537, -0.013206666335463524) * 250,
                        ThrowPower = 555,
                        Throw = true
                    })
                end
            end
        until not Toggles.DeleteAura.Value or shared.Library.Unloaded
    end
end)

Toggles.Twerk:OnChanged(function(value)
    shared.Twerk:Set(value)
end)